[project]
name = 'FastAPI Microservice for AWS Lambda'
version = "0.0.1"
license = {text = "MIT License"}
authors = [
  { name="SirPaulO", email="me@sirpauloliver.com" },
]
dependencies = [
    "boto3==1.28.59",
    "fastapi==0.103.2",
    "fastapi-exceptionshandler==0.0.3",
    "fastapi-versioning==0.10.0",
    "opensearch-logger==1.2.3",
    "pydantic==2.4.2",
    "pydantic-settings==2.0.3",
    "pyhumps==3.8.0",
    "requests_aws4auth==1.2.3",
    "SQLAlchemy==2.0.21",
    "starlette==0.27.0",
    "starlette-context==0.3.6",
]
keywords = ["fastapi", "microservice", "aws", "lambda", "rest", "api"]
description = 'Production ready FastAPI Microservice for AWS Lambda'
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[project.urls]
"Homepage" = "https://github.com/SirPaulO/fastapi_microservice_lambda"
"Bug Tracker" = "https://github.com/SirPaulO/fastapi_microservice_lambda/issues"
"Repository" = "https://github.com/SirPaulO/fastapi_microservice_lambda.git"

[tool.mypy]
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]
ignore_missing_imports = true
disallow_untyped_defs = true
warn_unused_ignores = true
no_strict_optional = true
no_implicit_optional = true
implicit_reexport = true
explicit_package_bases = true
namespace_packages = true
follow_imports = "silent"
warn_redundant_casts = true
check_untyped_defs = true
no_implicit_reexport = true

[[tool.mypy.overrides]]
module = "starlette_context.plugins"
implicit_reexport = true

[[tool.mypy.overrides]]
module = "app.middlewares.logging_middleware"
warn_unused_ignores = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = false
warn_untyped_fields = true

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 120

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".idea",
]

# Like Black, use a line length of 120 characters.
line-length = 120
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["C","E","F","W","B"]
ignore = ["E203", "E50", "E712", "B008", "E721", "B904"]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]

[tool.ruff.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 15.
max-complexity = 15
